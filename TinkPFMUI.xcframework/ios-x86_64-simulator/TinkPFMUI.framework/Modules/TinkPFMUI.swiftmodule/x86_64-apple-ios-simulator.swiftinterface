// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TinkPFMUI
import CoreGraphics
import Dispatch
import Foundation
import QuartzCore
import Security
import Swift
import UIKit
public protocol FontProviding {
  func font(for weight: TinkPFMUI.Font.Weight) -> TinkPFMUI.Font
}
@available(*, deprecated, renamed: "Category.Kind")
public typealias CategoryType = TinkPFMUI.Category.Kind
extension Category {
  public enum Kind : Swift.String, Swift.Hashable, Swift.Codable {
    case expenses
    case income
    case transfers
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
}
public class ColorProvider : TinkPFMUI.ColorProviding {
  public var background: UIKit.UIColor
  public var secondaryBackground: UIKit.UIColor
  public var groupedBackground: UIKit.UIColor
  public var secondaryGroupedBackground: UIKit.UIColor
  public var label: UIKit.UIColor
  public var secondaryLabel: UIKit.UIColor
  public var separator: UIKit.UIColor
  public var accent: UIKit.UIColor
  public var accentBackground: UIKit.UIColor?
  public var secondaryButtonTitle: UIKit.UIColor?
  public var tertiaryButtonTitle: UIKit.UIColor?
  public var tertiaryButtonBackground: UIKit.UIColor?
  public var chevronButton: UIKit.UIColor?
  public var chevronButtonDisabled: UIKit.UIColor?
  public var expenses: UIKit.UIColor
  public var income: UIKit.UIColor
  public var transfers: UIKit.UIColor
  public var uncategorized: UIKit.UIColor
  public var warning: UIKit.UIColor
  public var expensesIconColor: UIKit.UIColor?
  public var incomeIconColor: UIKit.UIColor?
  public var transfersIconColor: UIKit.UIColor?
  public var uncategorizedIconColor: UIKit.UIColor?
  public var expensesIconBackgroundColor: UIKit.UIColor?
  public var incomeIconBackgroundColor: UIKit.UIColor?
  public var transfersIconBackgroundColor: UIKit.UIColor?
  public var uncategorizedIconBackgroundColor: UIKit.UIColor?
  public init()
  public init(background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, groupedBackground: UIKit.UIColor, secondaryGroupedBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, accent: UIKit.UIColor, expenses: UIKit.UIColor, income: UIKit.UIColor, transfers: UIKit.UIColor, uncategorized: UIKit.UIColor, warning: UIKit.UIColor, expensesIconColor: UIKit.UIColor? = nil, incomeIconColor: UIKit.UIColor? = nil, transfersIconColor: UIKit.UIColor? = nil, uncategorizedIconColor: UIKit.UIColor? = nil, expensesIconBackgroundColor: UIKit.UIColor? = nil, incomeIconBackgroundColor: UIKit.UIColor? = nil, transfersIconBackgroundColor: UIKit.UIColor? = nil, uncategorizedIconBackgroundColor: UIKit.UIColor? = nil)
  @objc deinit
}
@objc final public class CategoryStatisticsViewController : UIKit.UINavigationController {
  public enum Style {
    case pieChart, barChart
    public static func == (a: TinkPFMUI.CategoryStatisticsViewController.Style, b: TinkPFMUI.CategoryStatisticsViewController.Style) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public let categoryType: TinkPFMUI.Category.Kind
  final public let style: TinkPFMUI.CategoryStatisticsViewController.Style
  final public var shouldShowCurrencySymbolInStatisticsTotal: Swift.Bool
  public init(tink: TinkPFMUI.Tink = .shared, categoryType: TinkPFMUI.Category.Kind, style: TinkPFMUI.CategoryStatisticsViewController.Style = .pieChart)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension CategoryStatisticsViewController {
  @objc override final public func viewDidLoad()
}
public enum Appearance {
  public static var provider: TinkPFMUI.AppearanceProviding
  @available(*, deprecated, renamed: "provider.colors")
  public static var colorProvider: TinkPFMUI.ColorProviding! {
    get
    set
  }
  @available(*, deprecated, renamed: "provider.fonts")
  public static var fontProvider: TinkPFMUI.FontProviding! {
    get
    set
  }
  @available(*, deprecated, renamed: "provider.icons")
  public static var iconProvider: TinkPFMUI.IconProviding! {
    get
    set
  }
}
public struct TransactionsQuery : Swift.Equatable {
  public let accountIDs: [TinkPFMUI.Account.ID]?
  public var categoryIDs: [TinkPFMUI.Category.ID]?
  public let dateInterval: Foundation.DateInterval?
  public var query: Swift.String?
  public let includeUpcoming: Swift.Bool
  public let sort: TinkPFMUI.TransactionsQuery.Sort
  public let order: TinkPFMUI.TransactionsQuery.Order
  public var limit: Swift.Int32?
  public enum Sort : Swift.String {
    case date
    case account
    case description
    case amount
    case category
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Order : Swift.String {
    case ascending
    case descending
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public init(accountIDs: [TinkPFMUI.Account.ID]? = nil, categoryIDs: [TinkPFMUI.Category.ID]? = nil, dateInterval: Foundation.DateInterval? = nil, query: Swift.String? = nil, includeUpcoming: Swift.Bool = false, sort: TinkPFMUI.TransactionsQuery.Sort = .date, order: TinkPFMUI.TransactionsQuery.Order = .descending, limit: Swift.Int32? = nil)
  @available(*, unavailable, renamed: "init(accountIDs:categoryIDs:dateInterval:query:includeUpcoming:sort:order:limit:)")
  public init(accountIds: [TinkPFMUI.Account.ID]? = nil, categoryIds: [TinkPFMUI.Category.ID]? = nil, dateInterval: Foundation.DateInterval? = nil, query: Swift.String? = nil, includeUpcoming: Swift.Bool = false, sort: TinkPFMUI.TransactionsQuery.Sort = .date, order: TinkPFMUI.TransactionsQuery.Order = .descending, limit: Swift.Int32? = nil)
  public static func == (a: TinkPFMUI.TransactionsQuery, b: TinkPFMUI.TransactionsQuery) -> Swift.Bool
}
@available(*, unavailable, renamed: "Tink")
public typealias TinkContext = TinkPFMUI.Tink
final public class Tink {
  public static let shared: TinkPFMUI.Tink
  public typealias ErrorHandler = (TinkPFMUI.TinkError) -> Swift.Void
  public init(configuration: TinkPFMUI.Tink.Configuration = Configuration(environment: .production), errorHandler: TinkPFMUI.Tink.ErrorHandler? = nil)
  @available(*, unavailable, renamed: "init(configuration:)")
  public init(clientConfiguration: TinkPFMUI.Tink.Configuration)
  final public func setCredential(_ credential: TinkPFMUI.SessionCredential?)
  final public func refresh()
  final public func resetCache()
  @objc deinit
}
public struct TinkError : Swift.Error {
  public enum Status {
    case cancelled
    case invalidArgument
    case notFound
    case unauthenticated
    case temporaryFailure
    case timedOut
    case unknown
    case badRequest
    case forbidden
    public static func == (a: TinkPFMUI.TinkError.Status, b: TinkPFMUI.TinkError.Status) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let status: TinkPFMUI.TinkError.Status
  public let message: Swift.String?
  public let underlyingError: Swift.Error
}
public class IconProvider : TinkPFMUI.IconProviding {
  public var account: UIKit.UIImage
  public var alert: UIKit.UIImage
  public var benefits: UIKit.UIImage
  public var budget: UIKit.UIImage
  public var doubleTransaction: UIKit.UIImage
  public var exclude: UIKit.UIImage
  public var expensesIcon: UIKit.UIImage
  public var financial: UIKit.UIImage
  public var food: UIKit.UIImage
  public var wellness: UIKit.UIImage
  public var home: UIKit.UIImage
  public var house: UIKit.UIImage
  public var incomeIcon: UIKit.UIImage
  public var entertainment: UIKit.UIImage
  public var pension: UIKit.UIImage
  public var other: UIKit.UIImage
  public var refund: UIKit.UIImage
  public var salary: UIKit.UIImage
  public var savings: UIKit.UIImage
  public var search: UIKit.UIImage
  public var shopping: UIKit.UIImage
  public var tag: UIKit.UIImage
  public var transfer: UIKit.UIImage
  public var transport: UIKit.UIImage
  public var uncategorizedIcon: UIKit.UIImage
  public var categoryIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat?
  public var checkBoxIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat?
  public init()
  public init(account: UIKit.UIImage, alert: UIKit.UIImage, benefits: UIKit.UIImage, budget: UIKit.UIImage, doubleTransaction: UIKit.UIImage, exclude: UIKit.UIImage, expensesIcon: UIKit.UIImage, financial: UIKit.UIImage, food: UIKit.UIImage, wellness: UIKit.UIImage, home: UIKit.UIImage, house: UIKit.UIImage, incomeIcon: UIKit.UIImage, entertainment: UIKit.UIImage, pension: UIKit.UIImage, other: UIKit.UIImage, refund: UIKit.UIImage, salary: UIKit.UIImage, savings: UIKit.UIImage, search: UIKit.UIImage, shopping: UIKit.UIImage, tag: UIKit.UIImage, transfer: UIKit.UIImage, transport: UIKit.UIImage, uncategorizedIcon: UIKit.UIImage, categoryIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat? = nil, checkBoxIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat? = nil)
  @objc deinit
}
public enum Color {
}
@available(*, unavailable, renamed: "Tink.Configuration")
public typealias ClientConfiguration = TinkPFMUI.Tink.Configuration
extension Tink {
  public struct Configuration {
    public init(environment: TinkPFMUI.Environment, certificate: Swift.String? = nil)
  }
}
public protocol AccountDetailsViewControllerDelegate : AnyObject {
  func accountDetailsViewController(_ viewController: TinkPFMUI.AccountDetailsViewController, didSelectTransaction transaction: TinkPFMUI.Transaction)
}
@objc @_hasMissingDesignatedInitializers final public class AccountDetailsViewController : UIKit.UIViewController {
  weak final public var delegate: TinkPFMUI.AccountDetailsViewControllerDelegate?
  convenience public init(tink: TinkPFMUI.Tink = .shared, accountID: TinkPFMUI.Account.ID)
  @available(*, deprecated, renamed: "init(tink:accountID:)")
  convenience public init(tink: TinkPFMUI.Tink = .shared, accountId: TinkPFMUI.Account.ID)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension AccountDetailsViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
}
extension AccountDetailsViewController : TinkPFMUI.CategorizeTransactionViewControllerDelegate {
  final public func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, willCategorizeAs category: TinkPFMUI.Category)
  final public func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, didCategorize transactionIDs: [TinkPFMUI.Transaction.ID], category: TinkPFMUI.Category)
  final public func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, didFailWithError error: Swift.Error)
  final public func categorizeTransactionViewControllerDidCancel(_ controller: TinkPFMUI.CategorizeTransactionViewController)
}
extension AccountDetailsViewController : TinkPFMUI.TransactionsViewControllerDelegate {
  final public func transactionsViewController(_ viewController: TinkPFMUI.TransactionsViewController, didSelectTransaction transaction: TinkPFMUI.Transaction)
}
extension AccountDetailsViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @objc final public func presentationControllerWillDismiss(_ presentationController: UIKit.UIPresentationController)
}
public class FontProvider : TinkPFMUI.FontProviding {
  public var lightFont: TinkPFMUI.Font
  public var regularFont: TinkPFMUI.Font
  public var semiBoldFont: TinkPFMUI.Font
  public var boldFont: TinkPFMUI.Font
  public init()
  public init(lightFont: TinkPFMUI.Font, regularFont: TinkPFMUI.Font, semiBoldFont: TinkPFMUI.Font, boldFont: TinkPFMUI.Font)
  public func font(for weight: TinkPFMUI.Font.Weight) -> TinkPFMUI.Font
  @objc deinit
}
public protocol EventTracking : AnyObject {
  func track(_ screen: TinkPFMUI.ScreenEvent)
}
public struct ActionableInsight {
  public struct Insight {
    public enum DataType {
      case unknown
      case accountBalanceLow
      case budgetOverspent
      case budgetCloseNegative
      case budgetClosePositive
      case budgetSuccess
      case budgetSummaryAchieved
      case budgetSummaryOverspent
      case largeExpense
      case singleUncategorizedTransaction
      case doubleCharge
      case weeklyUncategorizedTransactions
      case weeklySummaryExpensesByCategory
      case weeklySummaryExpensesByDay
      case monthlySummaryExpensesByCategory
      public static func == (a: TinkPFMUI.ActionableInsight.Insight.DataType, b: TinkPFMUI.ActionableInsight.Insight.DataType) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
  }
}
@available(*, deprecated, renamed: "Category")
public typealias CategoryNode = TinkPFMUI.Category
public struct Category : Swift.Equatable {
  public typealias ID = TinkPFMUI.Identifier<TinkPFMUI.Category>
  public let id: TinkPFMUI.Category.ID
  public static func == (a: TinkPFMUI.Category, b: TinkPFMUI.Category) -> Swift.Bool
}
public protocol IconProviding {
  var account: UIKit.UIImage { get set }
  var budget: UIKit.UIImage { get set }
  var alert: UIKit.UIImage { get set }
  var benefits: UIKit.UIImage { get set }
  var doubleTransaction: UIKit.UIImage { get set }
  var exclude: UIKit.UIImage { get set }
  var expensesIcon: UIKit.UIImage { get set }
  var financial: UIKit.UIImage { get set }
  var food: UIKit.UIImage { get set }
  var wellness: UIKit.UIImage { get set }
  var home: UIKit.UIImage { get set }
  var house: UIKit.UIImage { get set }
  var incomeIcon: UIKit.UIImage { get set }
  var entertainment: UIKit.UIImage { get set }
  var pension: UIKit.UIImage { get set }
  var other: UIKit.UIImage { get set }
  var refund: UIKit.UIImage { get set }
  var salary: UIKit.UIImage { get set }
  var savings: UIKit.UIImage { get set }
  var search: UIKit.UIImage { get set }
  var shopping: UIKit.UIImage { get set }
  var tag: UIKit.UIImage { get set }
  var transfer: UIKit.UIImage { get set }
  var transport: UIKit.UIImage { get set }
  var uncategorizedIcon: UIKit.UIImage { get set }
  var categoryIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat? { get set }
  var checkBoxIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat? { get set }
}
extension FinanceOverviewViewController {
  public enum Feature {
    public enum StatisticsData {
      case expenses
      case income
      public static func == (a: TinkPFMUI.FinanceOverviewViewController.Feature.StatisticsData, b: TinkPFMUI.FinanceOverviewViewController.Feature.StatisticsData) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    case statistics([TinkPFMUI.FinanceOverviewViewController.Feature.StatisticsData])
    case latestTransactions
    case accounts
    case actionableInsights(delegate: TinkPFMUI.ActionableInsightsViewControllerDelegate)
  }
}
public enum ScreenEvent {
  case overview
  case expenses
  case income
  case transactions
  case categorySelection
  case similarTransactions
  case accountDetails
  case events
  case eventsArchive
  public var name: Swift.String {
    get
  }
  public static func == (a: TinkPFMUI.ScreenEvent, b: TinkPFMUI.ScreenEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class CategoryStatisticsNavigationControllerDelegate : ObjectiveC.NSObject, UIKit.UINavigationControllerDelegate {
  @objc open func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc open func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc open func navigationControllerSupportedInterfaceOrientations(_ navigationController: UIKit.UINavigationController) -> UIKit.UIInterfaceOrientationMask
  @objc open func navigationControllerPreferredInterfaceOrientationForPresentation(_ navigationController: UIKit.UINavigationController) -> UIKit.UIInterfaceOrientation
  @objc open func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc open func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc override dynamic public init()
  @objc deinit
}
public struct Identifier<Type> : Swift.Hashable, Swift.ExpressibleByStringLiteral, Swift.Codable {
  public let value: Swift.String
  public init(_ value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public static func == (a: TinkPFMUI.Identifier<Type>, b: TinkPFMUI.Identifier<Type>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum Font {
  case custom(Swift.String)
  case systemDefault
}
extension Font {
  public enum Weight {
    case light
    case regular
    case semibold
    case bold
    public static func == (a: TinkPFMUI.Font.Weight, b: TinkPFMUI.Font.Weight) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@available(*, unavailable, renamed: "AppearanceProvider")
public typealias FinanceOverviewAppearanceProvider = TinkPFMUI.AppearanceProvider
public protocol AppearanceProviding {
  var colors: TinkPFMUI.ColorProviding { get set }
  var icons: TinkPFMUI.IconProviding { get set }
  var fonts: TinkPFMUI.FontProviding { get set }
  @available(*, deprecated, renamed: "colors")
  var colorProviding: TinkPFMUI.ColorProviding { get }
  @available(*, deprecated, renamed: "icons")
  var iconProviding: TinkPFMUI.IconProviding { get }
  @available(*, deprecated, renamed: "fonts")
  var fontProviding: TinkPFMUI.FontProviding { get }
}
public struct AppearanceProvider : TinkPFMUI.AppearanceProviding {
  public var colors: TinkPFMUI.ColorProviding
  public var icons: TinkPFMUI.IconProviding
  public var fonts: TinkPFMUI.FontProviding
  @available(*, deprecated, renamed: "colors")
  public var colorProviding: TinkPFMUI.ColorProviding {
    get
    set
  }
  @available(*, deprecated, renamed: "icons")
  public var iconProviding: TinkPFMUI.IconProviding {
    get
    set
  }
  @available(*, deprecated, renamed: "fonts")
  public var fontProviding: TinkPFMUI.FontProviding {
    get
    set
  }
  public init(colors: TinkPFMUI.ColorProvider? = nil, fonts: TinkPFMUI.FontProvider? = nil, icons: TinkPFMUI.IconProvider? = nil)
  @available(*, deprecated, message: "Use AppearanceProvider(colorProvider:fontProvider:iconProvider:) instead.")
  public init(background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, groupedBackground: UIKit.UIColor, secondaryGroupedBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, accent: UIKit.UIColor, expenses: UIKit.UIColor, income: UIKit.UIColor, transfers: UIKit.UIColor, uncategorized: UIKit.UIColor, warning: UIKit.UIColor, expensesIconColor: UIKit.UIColor? = nil, incomeIconColor: UIKit.UIColor? = nil, transfersIconColor: UIKit.UIColor? = nil, uncategorizedIconColor: UIKit.UIColor? = nil, expensesIconBackgroundColor: UIKit.UIColor? = nil, incomeIconBackgroundColor: UIKit.UIColor? = nil, transfersIconBackgroundColor: UIKit.UIColor? = nil, uncategorizedIconBackgroundColor: UIKit.UIColor? = nil, lightFont: TinkPFMUI.Font = .systemDefault, regularFont: TinkPFMUI.Font = .systemDefault, semiBoldFont: TinkPFMUI.Font = .systemDefault, boldFont: TinkPFMUI.Font = .systemDefault, account: UIKit.UIImage, budget: UIKit.UIImage, alert: UIKit.UIImage, benefits: UIKit.UIImage, doubleTransaction: UIKit.UIImage, exclude: UIKit.UIImage, expensesIcon: UIKit.UIImage, financial: UIKit.UIImage, food: UIKit.UIImage, wellness: UIKit.UIImage, home: UIKit.UIImage, house: UIKit.UIImage, incomeIcon: UIKit.UIImage, entertainment: UIKit.UIImage, pension: UIKit.UIImage, other: UIKit.UIImage, refund: UIKit.UIImage, salary: UIKit.UIImage, savings: UIKit.UIImage, search: UIKit.UIImage, shopping: UIKit.UIImage, tag: UIKit.UIImage, transfer: UIKit.UIImage, transport: UIKit.UIImage, uncategorizedIcon: UIKit.UIImage, categoryIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat? = nil)
  @available(*, deprecated, message: "Use AppearanceProvider(colorProvider:fontProvider:iconProvider:) instead.")
  public init(accent: UIKit.UIColor, expenses: UIKit.UIColor, income: UIKit.UIColor, transfers: UIKit.UIColor, uncategorized: UIKit.UIColor, warning: UIKit.UIColor, expensesIconColor: UIKit.UIColor? = nil, incomeIconColor: UIKit.UIColor? = nil, transfersIconColor: UIKit.UIColor? = nil, uncategorizedIconColor: UIKit.UIColor? = nil, expensesIconBackgroundColor: UIKit.UIColor? = nil, incomeIconBackgroundColor: UIKit.UIColor? = nil, transfersIconBackgroundColor: UIKit.UIColor? = nil, uncategorizedIconBackgroundColor: UIKit.UIColor? = nil, lightFont: TinkPFMUI.Font = .systemDefault, regularFont: TinkPFMUI.Font = .systemDefault, semiBoldFont: TinkPFMUI.Font = .systemDefault, boldFont: TinkPFMUI.Font = .systemDefault, categoryIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat? = nil)
  @available(*, deprecated, message: "Use AppearanceProvider(colorProvider:fontProvider:iconProvider:) instead.")
  public init(background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, groupedBackground: UIKit.UIColor, secondaryGroupedBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, accent: UIKit.UIColor, expenses: UIKit.UIColor, income: UIKit.UIColor, transfers: UIKit.UIColor, uncategorized: UIKit.UIColor, expensesIconColor: UIKit.UIColor? = nil, incomeIconColor: UIKit.UIColor? = nil, transfersIconColor: UIKit.UIColor? = nil, uncategorizedIconColor: UIKit.UIColor? = nil, expensesIconBackgroundColor: UIKit.UIColor? = nil, incomeIconBackgroundColor: UIKit.UIColor? = nil, transfersIconBackgroundColor: UIKit.UIColor? = nil, uncategorizedIconBackgroundColor: UIKit.UIColor? = nil, lightFont: TinkPFMUI.Font = .systemDefault, regularFont: TinkPFMUI.Font = .systemDefault, semiBoldFont: TinkPFMUI.Font = .systemDefault, boldFont: TinkPFMUI.Font = .systemDefault, categoryIconBackgroundCornerRadiusFactor: CoreGraphics.CGFloat? = nil)
  @available(*, deprecated, message: "Use AppearanceProvider(colorProvider:fontProvider:iconProvider:) instead.")
  public init(background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, accent: UIKit.UIColor, expense: UIKit.UIColor, income: UIKit.UIColor, transfer: UIKit.UIColor, uncategorized: UIKit.UIColor, lightFont: TinkPFMUI.Font = .systemDefault, regularFont: TinkPFMUI.Font = .systemDefault, semiBoldFont: TinkPFMUI.Font = .systemDefault, boldFont: TinkPFMUI.Font = .systemDefault)
  @available(*, deprecated, message: "Use AppearanceProvider(colorProvider:fontProvider:iconProvider:) instead.")
  public init(background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, groupedBackground: UIKit.UIColor, secondaryGroupedBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, accent: UIKit.UIColor, expenses: UIKit.UIColor, income: UIKit.UIColor, transfers: UIKit.UIColor, uncategorized: UIKit.UIColor, lightFont: TinkPFMUI.Font = .systemDefault, regularFont: TinkPFMUI.Font = .systemDefault, semiBoldFont: TinkPFMUI.Font = .systemDefault, boldFont: TinkPFMUI.Font = .systemDefault)
}
public enum EventTracker {
  public static var tracker: TinkPFMUI.EventTracking?
}
public struct Budget {
  public typealias ID = TinkPFMUI.Identifier<TinkPFMUI.Budget>
}
@available(*, deprecated, renamed: "ActionableInsightsViewController")
public typealias ActionableInsightListViewController = TinkPFMUI.ActionableInsightsViewController
@available(*, deprecated, renamed: "ActionableInsightsViewControllerDelegate")
public typealias ActionableInsightListViewControllerDelegate = TinkPFMUI.ActionableInsightsViewControllerDelegate
public protocol ActionableInsightsViewControllerDelegate : AnyObject {
  func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, showBudget id: TinkPFMUI.Budget.ID, budgetPeriodStart: Foundation.Date)
  func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, initiateTransferFromAccount source: Foundation.URL?, to destination: Foundation.URL?, amount: Swift.Double?, currencyCode: Swift.String?, completionHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, showTransactionWithID id: TinkPFMUI.Transaction.ID)
  func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, categorizeTransactionWithID id: TinkPFMUI.Transaction.ID, completionHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, showTransactionsWithIDs ids: [TinkPFMUI.Transaction.ID])
  func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, categorizeTransactionsWithIDs ids: [TinkPFMUI.Transaction.ID], completionHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func actionableInsightsViewController(_ viewController: UIKit.UIViewController, imageForInsightWithDataType dataType: TinkPFMUI.ActionableInsight.Insight.DataType) -> UIKit.UIImage?
}
extension ActionableInsightsViewControllerDelegate {
  public func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, categorizeTransactionWithID id: TinkPFMUI.Transaction.ID, completionHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, showTransactionsWithIDs ids: [TinkPFMUI.Transaction.ID])
  public func actionableInsightsViewController(_ viewController: TinkPFMUI.ActionableInsightsViewController, categorizeTransactionsWithIDs ids: [TinkPFMUI.Transaction.ID], completionHandler: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func actionableInsightsViewController(_ viewController: UIKit.UIViewController, imageForInsightWithDataType dataType: TinkPFMUI.ActionableInsight.Insight.DataType) -> UIKit.UIImage?
}
@objc @_hasMissingDesignatedInitializers final public class ActionableInsightsViewController : UIKit.UIViewController {
  public enum EmptyState {
    case `default`
    case custom(UIKit.UIView)
  }
  final public var emptyState: TinkPFMUI.ActionableInsightsViewController.EmptyState {
    get
    set
  }
  convenience public init(tink: TinkPFMUI.Tink = .shared, delegate: TinkPFMUI.ActionableInsightsViewControllerDelegate, shouldShowArchive: Swift.Bool = true)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension ActionableInsightsViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
}
extension ActionableInsightsViewController : UIKit.UICollectionViewDataSource {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension ActionableInsightsViewController : TinkPFMUI.CategorizeTransactionViewControllerDelegate {
  final public func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, willCategorizeAs category: TinkPFMUI.Category)
  final public func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, didCategorize transactions: [TinkPFMUI.Transaction.ID], category: TinkPFMUI.Category)
  final public func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, didFailWithError error: Swift.Error)
}
extension ActionableInsightsViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @objc final public func presentationControllerWillDismiss(_ presentationController: UIKit.UIPresentationController)
}
public protocol TransactionsViewControllerDelegate : AnyObject {
  func transactionsViewController(_ viewController: TinkPFMUI.TransactionsViewController, didSelectTransaction transaction: TinkPFMUI.Transaction)
  func transactionsViewController(_ viewController: TinkPFMUI.TransactionsViewController, didFailWithError error: Swift.Error)
}
extension TransactionsViewControllerDelegate {
  public func transactionsViewController(_ viewController: TinkPFMUI.TransactionsViewController, didFailWithError error: Swift.Error)
}
@objc @_hasMissingDesignatedInitializers final public class TransactionsViewController : UIKit.UIViewController {
  weak final public var delegate: TinkPFMUI.TransactionsViewControllerDelegate?
  convenience public init(tink: TinkPFMUI.Tink = .shared, query: TinkPFMUI.TransactionsQuery = TransactionsQuery())
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension TransactionsViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewDidLayoutSubviews()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
}
extension TransactionsViewController {
  final public func clearSelection(animated: Swift.Bool)
}
extension TransactionsViewController : UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection sectionIndex: Swift.Int) -> UIKit.UIView?
  @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public protocol ColorProviding {
  var background: UIKit.UIColor { get set }
  var secondaryBackground: UIKit.UIColor { get set }
  var groupedBackground: UIKit.UIColor { get set }
  var secondaryGroupedBackground: UIKit.UIColor { get set }
  var label: UIKit.UIColor { get set }
  var secondaryLabel: UIKit.UIColor { get set }
  var separator: UIKit.UIColor { get set }
  var accent: UIKit.UIColor { get set }
  var accentBackground: UIKit.UIColor? { get set }
  var secondaryButtonTitle: UIKit.UIColor? { get set }
  var tertiaryButtonTitle: UIKit.UIColor? { get set }
  var tertiaryButtonBackground: UIKit.UIColor? { get set }
  var chevronButton: UIKit.UIColor? { get set }
  var chevronButtonDisabled: UIKit.UIColor? { get set }
  var expenses: UIKit.UIColor { get set }
  var income: UIKit.UIColor { get set }
  var transfers: UIKit.UIColor { get set }
  var uncategorized: UIKit.UIColor { get set }
  var warning: UIKit.UIColor { get set }
  var expensesIconColor: UIKit.UIColor? { get set }
  var incomeIconColor: UIKit.UIColor? { get set }
  var transfersIconColor: UIKit.UIColor? { get set }
  var uncategorizedIconColor: UIKit.UIColor? { get set }
  var expensesIconBackgroundColor: UIKit.UIColor? { get set }
  var incomeIconBackgroundColor: UIKit.UIColor? { get set }
  var transfersIconBackgroundColor: UIKit.UIColor? { get set }
  var uncategorizedIconBackgroundColor: UIKit.UIColor? { get set }
}
public enum Environment {
  case production
  case custom(url: Foundation.URL)
}
@objc @_hasMissingDesignatedInitializers final public class FinanceOverviewViewController : UIKit.UIViewController {
  final public var hidesTopBarWhenPushed: Swift.Bool
  final public var shouldShowCurrencySymbolInStatisticsTotal: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "Use init(tink:features:) instead and embed this view controller inside a UINavigationController.")
  convenience public init(tink: TinkPFMUI.Tink = .shared, layoutSections: [TinkPFMUI.FinanceOverviewViewController.Feature])
  convenience public init(tink: TinkPFMUI.Tink = .shared, features: [TinkPFMUI.FinanceOverviewViewController.Feature])
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension FinanceOverviewViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
}
extension FinanceOverviewViewController : UIKit.UIScrollViewDelegate {
  @objc final public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public struct Transaction {
  public typealias ID = TinkPFMUI.Identifier<TinkPFMUI.Transaction>
  public let id: TinkPFMUI.Transaction.ID
}
extension Transaction : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TinkPFMUI.Transaction, b: TinkPFMUI.Transaction) -> Swift.Bool
}
public enum SessionCredential {
  case sessionID(Swift.String)
  case accessToken(Swift.String)
}
public struct Account : Swift.Hashable {
  public typealias ID = TinkPFMUI.Identifier<TinkPFMUI.Account>
  public let id: TinkPFMUI.Account.ID
  public static func == (a: TinkPFMUI.Account, b: TinkPFMUI.Account) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol CategorizeTransactionViewControllerDelegate : AnyObject {
  func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, willCategorizeAs category: TinkPFMUI.Category)
  func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, didCategorize transactionIDs: [TinkPFMUI.Transaction.ID], category: TinkPFMUI.Category)
  func categorizeTransactionViewController(_ controller: TinkPFMUI.CategorizeTransactionViewController, didFailWithError error: Swift.Error)
  func categorizeTransactionViewControllerDidCancel(_ controller: TinkPFMUI.CategorizeTransactionViewController)
}
extension CategorizeTransactionViewControllerDelegate where Self : UIKit.UIViewController {
  public func categorizeTransactionViewControllerDidCancel(_ controller: TinkPFMUI.CategorizeTransactionViewController)
}
@objc @_hasMissingDesignatedInitializers final public class CategorizeTransactionViewController : UIKit.UINavigationController {
  weak final public var categorizeTransactionDelegate: TinkPFMUI.CategorizeTransactionViewControllerDelegate?
  convenience public init(tink: TinkPFMUI.Tink = .shared, transactionID: TinkPFMUI.Transaction.ID, categoryTypes: [TinkPFMUI.Category.Kind], categoryID: TinkPFMUI.Category.ID? = nil, showSimilarTransactions: Swift.Bool = true)
  @available(*, deprecated, renamed: "init(tink:transactionID:categoryTypes:categoryID:showSimilarTransactions:)")
  convenience public init(tink: TinkPFMUI.Tink = .shared, transactionId: TinkPFMUI.Transaction.ID, categoryTypes: [TinkPFMUI.Category.Kind], categoryId: TinkPFMUI.Category.ID? = nil, showSimilarTransactions: Swift.Bool = true)
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension CategorizeTransactionViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
}
extension TinkPFMUI.Category.Kind : Swift.RawRepresentable {}
extension TinkPFMUI.CategoryStatisticsViewController.Style : Swift.Equatable {}
extension TinkPFMUI.CategoryStatisticsViewController.Style : Swift.Hashable {}
extension TinkPFMUI.TransactionsQuery.Sort : Swift.Equatable {}
extension TinkPFMUI.TransactionsQuery.Sort : Swift.Hashable {}
extension TinkPFMUI.TransactionsQuery.Sort : Swift.RawRepresentable {}
extension TinkPFMUI.TransactionsQuery.Order : Swift.Equatable {}
extension TinkPFMUI.TransactionsQuery.Order : Swift.Hashable {}
extension TinkPFMUI.TransactionsQuery.Order : Swift.RawRepresentable {}
extension TinkPFMUI.TinkError.Status : Swift.Equatable {}
extension TinkPFMUI.TinkError.Status : Swift.Hashable {}
extension TinkPFMUI.ActionableInsight.Insight.DataType : Swift.Equatable {}
extension TinkPFMUI.ActionableInsight.Insight.DataType : Swift.Hashable {}
extension TinkPFMUI.FinanceOverviewViewController.Feature.StatisticsData : Swift.Equatable {}
extension TinkPFMUI.FinanceOverviewViewController.Feature.StatisticsData : Swift.Hashable {}
extension TinkPFMUI.ScreenEvent : Swift.Equatable {}
extension TinkPFMUI.ScreenEvent : Swift.Hashable {}
extension TinkPFMUI.Font.Weight : Swift.Equatable {}
extension TinkPFMUI.Font.Weight : Swift.Hashable {}
